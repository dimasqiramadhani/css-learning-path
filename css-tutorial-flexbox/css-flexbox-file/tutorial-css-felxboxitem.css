* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.container {
  width: 400px;
  margin: 50px auto;
  border: 2px solid black;
  display: flex;
}

.box {
  /* width: 100px; */
  height: 100px;
  background-color: royalblue;
  margin: 1px;
  color: white;
  font-size: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.satu {
  /* 
        The order Property

        The order property specifies the order of the flex items.

        The order value must be a number, default value is 0.
    */
  order: 3;
  /* 
        The flex-grow Property

        The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.
        
        The value must be a number, default value is 0. 
    */
  /* flex-grow: 2; */
}

.dua {
  order: 1;
  /* 
        The flex-basis Property

        The flex-basis property specifies the initial length of a flex item. 
    */
  /* flex-basis: 100px; */
  /* flex-grow: 1; */
  /* 
        The flex-shrink Property
        
        The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items. 

        The value must be a number, default value is 1.
    */
  /* flex-shrink: 0; */
  /* 
        The flex Property

        The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.
    */
  /* flex: 0 0 200px; */
  /* 
        The align-self Property
        
        The align-self property specifies the alignment for the selected item inside the flexible container.

        The align-self property overrides the default alignment set by the container's align-items property. 
    */
}

.tiga {
  order: 2;
  /* flex-grow: 1; */
}
