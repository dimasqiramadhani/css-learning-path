.box {
    width: 100px;
    height: 100px;
    background-color: teal;
    color: white;

    /*  
        The animation-name property specifies a name for the @keyframes animation.
    */
    animation-name: animation;

    /* 
        NOTE: The animation-duration property defines how long an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds). 

        In the example above we have specified when the style will change by using the keywords "from" and "to" (which represents 0% (start) and 100% (complete)).

        It is also possible to use percent. By using percent, you can add as many style changes as you like.

        The following example will change the background-color of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete 
    */
    animation-duration: 3s;

    /* 
        The animation-delay property specifies a delay for the start of an animation.

        The following example has a 2 seconds delay before starting the animation.
        
        Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for N seconds.

        In the following example, the animation will start as if it had already been playing for 1 seconds.
    */
    animation-delay: 1s;

    /* 
        The animation-iteration-count property specifies the number of times an animation should run.

        The following example will run the animation 3 times before it stops.
    */
    animation-iteration-count: 3;

    /* 
        The animation-direction property specifies whether an animation should be played forwards, backwards or in alternate cycles.

        The animation-direction property can have the following values:

            1. normal - The animation is played as normal (forwards). This is default.
            
            2. reverse - The animation is played in reverse direction (backwards).
            
            3. alternate - The animation is played forwards first, then backwards.
            
            4. alternate-reverse - The animation is played backwards first, then forwards.
        
        The following example will run the animation in reverse direction (backwards).
    */
    animation-direction: alternate-reverse;

    /* 
        The animation-timing-function property specifies the speed curve of the animation.

        The animation-timing-function property can have the following values:

            1. ease - Specifies an animation with a slow start, then fast, then end slowly (this is default)
            
            2. linear - Specifies an animation with the same speed from start to end
            
            3. ease-in - Specifies an animation with a slow start
            
            4. ease-out - Specifies an animation with a slow end
            
            5. ease-in-out - Specifies an animation with a slow start and end
            
            6. cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function
            
        The following example shows some of the different speed curves that can be used
    */
    animation-timing-function: ease;

    /* 
        CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior.

        The animation-fill-mode property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both).

        The animation-fill-mode property can have the following values:

            1. none - Default value. Animation will not apply any styles to the element before or after it is executing.
            
            2. forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count).
            
            3. backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period.
            
            4. both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions.
        
        The following example lets the <div> element retain the style values from the last keyframe when the animation ends
    */
    animation-fill-mode: backwards;

    /* 
        The animation-play-state property specifies whether the animation is running or paused.

        NOTE: Use this property in a JavaScript to pause an animation in the middle of a cycle.
    */
    animation-play-state: running;
}

/* 
    The @keyframes Rule

    When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times.

    To get an animation to work, you must bind the animation to an element.

    The following example binds the "example" animation to the <div> element. The animation will last for 1 seconds, and it will gradually change the background-color of the <div> element from "teal" to "tomato".
*/
@keyframes animation {
    0% {
        background-color: teal;
    }

    25% {
        background-color: tomato;
    }

    50% {
        background-color: yellow;
    }

    75% {
        background-color: green;
    }

    100% {
        background-color: blue;
    }
}